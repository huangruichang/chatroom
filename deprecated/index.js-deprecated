var express = require('express');
var app = express();
var server = require('http').createServer(app);
var io = require('socket.io')(server);
var common = require('./common');
var cluster = require('cluster');
var port = process.env.PROT || 3000;
var fs = require('fs-extra');
var config = fs.readJsonSync('./config.json');

var UserService = require('./user');
var MessageService = require('./message');

var userService = new UserService(config);
var messageService = new MessageService(config);

server.listen(port, function () {
    console.log('Server listening at port %d, pid: %d', port, process.pid);
});

var sockets = [];

app.use(express.static(__dirname + '/public'));

io.on('connection', function (socket) {

    sockets.push(socket);

    console.log('pid: %d is serving...', process.pid);

    socket.on('message.new', function (data) {
        var messageObj = {
            username: socket.username,
            content: data
        };
        socket.broadcast.emit('message.new', messageObj);
        ipcMessageBroadcast(messageObj, 'message.new');
        messageService.addMessage(messageObj);
    });

    socket.on('user.add', function (username) {
        socket.username = username;

        var aPromise = userService.addUser({
            username: username,
            isFocus: true,
            last_active: Date.parse(new Date())
        });

        aPromise.then(function (user) {
            var data = {
                user: {
                    username: user.username,
                    isFocus: true
                },
                users_num: user.users_num
            };
            socket.broadcast.emit('user.add', data);
            socket.emit('user.add', data);
            ipcMessageBroadcast(user, 'user.add');
        });
    });

    socket.on('user.name.valid', function (username) {
        var data = {
            is_valided: true
        };
        var uPromise = userService.isExisted(username);
        uPromise.then(function (result) {
            data.is_valided = !result;
            if (!data.is_valided) {
                data.msg = 'user already exists!';
            }
            socket.emit('user.name.valid', data);
        });
    });

    socket.on('user.list.status', function () {
        var lPromise = userService.listUsers();
        lPromise.then(function (userList) {
            console.log(userList);
            socket.emit('user.list.status', {
                userList: userList
            });
        });
    });

    socket.on('user.isFocus', function (data) {
        var result = {
            username: data.username,
            isFocus: data.isFocus
        };
        userService.updateUser(data.username, {
            isFocus: data.isFocus
        });
        socket.emit('user.isFocus', result);
        socket.broadcast.emit('user.isFocus', result);
        ipcMessageBroadcast(result, 'user.isFocus');
    });

    socket.on('disconnect', function () {
        if (socket.username) {
            var rPromise = userService.removeUser(socket.username);
            rPromise.then(function (result) {
                var data = {
                    username: socket.username,
                    users_num: result
                };
                socket.broadcast.emit('user.left', data);
                ipcMessageBroadcast(data, 'user.left');
            });
        }
    });
});

var ipcMessageBroadcast = function (message, event) {
    if (event) {
        message.event = event;
    }
    process.send(message);
};

process.on('message', function (data) {
    if (data.pid === process.pid) {
        return;
    }
    if (!data.message || !data.message.event) {
        return;
    }
    var event = data.message.event;
    switch (event) {
        case 'user.add':
            sockets.forEach(function (socket) {
                socket.emit('user.add', data.message);
            });
            break;
        case 'user.left':
            sockets.forEach(function (socket) {
                socket.emit('user.left', data.message);
            });
            break;
        case 'message.new':
            sockets.forEach(function (socket) {
                socket.emit('message.new', data.message);
            });
            break;
        case 'user.isFocus':
            console.log('user.isFocus');
            sockets.forEach(function (socket) {
                socket.emit('user.isFocus', data.message);
            });
            break;
        default : break;
    }
});